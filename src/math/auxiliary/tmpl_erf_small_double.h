#ifndef TMPL_ERF_SMALL_DOUBLE_H
#define TMPL_ERF_SMALL_DOUBLE_H

#include <libtmpl/include/tmpl_config.h>

/*  Coefficients for the numerator of the Remez rational approximation.       */
#define A00 (+1.1283791670955125745760330241780086119828422823916E+00)
#define A01 (+1.4343640468334056155176867330351335600355211065798E-01)
#define A02 (+4.5474337004727553078898217128747813089436299695619E-02)
#define A03 (+1.8748198087220745226081152760199054494885436089003E-03)
#define A04 (+1.9678567923227989580221676306775698159538851158416E-04)
#define A05 (+7.3696648913103735807806175115005147789227107445326E-08)

/*  Coefficients for the denominator of the Remez rational approximation.     */
#define B00 (+1.0000000000000000000000000000000000000000000000000E+00)
#define B01 (+4.6045053725384797760281438988924454776819834747102E-01)
#define B02 (+9.3784094288644792593728019540763983359179251368593E-02)
#define B03 (+1.0687350641996694817758850886555825654428290771055E-02)
#define B04 (+6.9191595185068288930898768882994885221058241870925E-04)
#define B05 (+2.0783836614993649468633471293032045438449520367478E-05)

#define TMPL_NUM_EVAL(z) A00 + z*(A01 + z*(A02 + z*(A03 + z*(A04 + z*A05))))
#define TMPL_DEN_EVAL(z) B00 + z*(B01 + z*(B02 + z*(B03 + z*(B04 + z*B05))))

TMPL_STATIC_INLINE
double tmpl_Double_Erf_Small(double x)
{
    const double x2 = x*x;
    const double p = TMPL_NUM_EVAL(x2);
    const double q = TMPL_DEN_EVAL(x2);
    return x * p / q;
}

#include "tmpl_math_undef.h"

#endif
