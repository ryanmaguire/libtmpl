/******************************************************************************
 *                                  LICENSE                                   *
 ******************************************************************************
 *  This file is part of libtmpl.                                             *
 *                                                                            *
 *  libtmpl is free software: you can redistribute it and/or modify           *
 *  it under the terms of the GNU General Public License as published by      *
 *  the Free Software Foundation, either version 3 of the License, or         *
 *  (at your option) any later version.                                       *
 *                                                                            *
 *  libtmpl is distributed in the hope that it will be useful,                *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *  GNU General Public License for more details.                              *
 *                                                                            *
 *  You should have received a copy of the GNU General Public License         *
 *  along with libtmpl.  If not, see <https://www.gnu.org/licenses/>.         *
 ******************************************************************************/
#ifndef TMPL_ERF_MEDIUM_FLOAT_H
#define TMPL_ERF_MEDIUM_FLOAT_H

#include <libtmpl/include/tmpl_config.h>
#include <libtmpl/include/types/tmpl_ieee754_float.h>

#if TMPL_HAS_IEEE754_FLOAT == 1

static float tmpl_erffm_coeffs[64] = {
    +8.5527180348203474970096086523676667943525499476085E-01F,
    +3.8957680693404930871025879134956842127304562073310E-01F,
    -4.0169398561136667087146227336225599076829627385918E-01F,
    +1.4624353608376808180747588080300423884833367185986E-01F,
    +8.7808757065430830460068106347607765540930576592167E-01F,
    +3.4112485200159494706644323442626935807444613770976E-01F,
    -3.7306839815590957752172807124399356319945034446883E-01F,
    +1.5825275350741799140875914877029204012894269114467E-01F,
    +8.9798960699064906558344608697177206995683683810790E-01F,
    +2.9637440848540809347169754889561259503361614959335E-01F,
    -3.4266468815855964839748290213619419547749198550703E-01F,
    +1.6527413559862121718984984794585847445912077776429E-01F,
    +9.1521500371571912532618346868301327615688396858618E-01F,
    +2.5549070807721419294993680828720354178083985389745E-01F,
    -3.1137784011956660749912001579476069999765069528389E-01F,
    +1.6775936759391103487987668837898852379013654206996E-01F,
    +9.3000779835208335606378194381390442148934826033732E-01F,
    +2.1853278455951764771352778368254138050018159387735E-01F,
    -2.8000797450567550285395749106582181652004849177148E-01F,
    +1.6625554523752781894832790386483842378274323099380E-01F,
    +9.4261273026297011393951855287482786100587896546505E-01F,
    +1.8546636434733854649477958288245342637194904576742E-01F,
    -2.4924516612588974784945798787964508696024255144947E-01F,
    +1.6138770351075767075046684642613724232482831523328E-01F,
    +9.5326985518701030530099256977701320713584773400935E-01F,
    +1.5617833563849667931387771966035671045297740845441E-01F,
    -2.1965986900201389512842825113204109983139708740223E-01F,
    +1.5380202579612599510688684412528786155941610406034E-01F,
    +9.6221008919605122950847925257937666811891600816279E-01F,
    +1.3049188188696055375691663852457884646471995638056E-01F,
    -1.9170090295759082136857834853815451449790509848680E-01F,
    +1.4414383051731794382361991008113116569448086950248E-01F,
    +9.6965170069139058767989425478717580164800104806733E-01F,
    +1.0818156765692509722520553013196615241703891968700E-01F,
    -1.6569852854236411504216436520306174771497674335794E-01F,
    +1.3302844138429299937677797064356839612158846597914E-01F,
    +9.7579772644269366911080831532639186097045538341087E-01F,
    +8.8987727975975991090061371998395975061949983034926E-02F,
    -1.4187216500746713613696250142033717389834604147694E-01F,
    +1.2101988367950523910340105114718250937280155209329E-01F,
    +9.8083425190066911183362290427625457752594400530485E-01F,
    +7.2629664538289226995177806247432060874523357221809E-02F,
    -1.2034152632421526234577705801367284449683584282300E-01F,
    +1.0861569446888285856968661666996817742696959076407E-01F,
    +9.8492946934175195935687357074109802218311896031377E-01F,
    +5.8817292538933189340141779760618408965706977159715E-02F,
    -1.0114004403361531420959399065975091878499955870106E-01F,
    +9.6237652923001208367746545967520696696181743652462E-02F,
    +9.8823340950128453392316664767786663489912837477741E-01F,
    +4.7261020110485185910118458244066641261780647828472E-02F,
    -8.4229512062916485652484297287897828549819414922890E-02F,
    +8.4227904989310817445969797329002944299578508810752E-02F,
    +9.9087823274411331731546115726714595015167026619107E-01F,
    +3.7679768375519989381948570831068850607287155065579E-02F,
    -6.9515011404799223411622808145406276210313952115343E-02F,
    +7.2849713995075194917343700537163453261953830834531E-02F,
    +9.9297896355619714869849163723317072645654454979733E-01F,
    +2.9807148271973690758077272422545400812903264753042E-02F,
    -5.6859332425671514345909958097926029232830286839798E-02F,
    +6.2291910161403787435669301482777777546332038003001E-02F,
    +9.9463455597792572177851986791812066032094127806055E-01F,
    +2.3395897048140531909660068517756274618657679736251E-02F,
    -4.6096291009060921508913981665258472385903860892094E-02F,
    +5.2676081147044176069271185242722547523541025317055E-02F
};

#define A00 (tmpl_erffm_coeffs[n])
#define A01 (tmpl_erffm_coeffs[n+1])
#define A02 (tmpl_erffm_coeffs[n+2])
#define A03 (tmpl_erffm_coeffs[n+3])
#define TMPL_POLY_EVAL(z) A00 + z*(A01 + z*(A02 + z*A03))

TMPL_STATIC_INLINE
float tmpl_Float_Erf_Medium(tmpl_IEEE754_Float w)
{
    tmpl_IEEE754_Float shift;
    const unsigned int n = (w.bits.man0 & 0x78U) >> 1;
    shift = w;
    shift.bits.man0 = (w.bits.man0 & 0x78U) | 0x0004U;
    shift.bits.man1 = 0x0000U;
    w.r -= shift.r;

    return TMPL_POLY_EVAL(w.r);
}

#else
/*  Else for #if TMPL_HAS_IEEE754_FLOAT == 1.                                 */

/*  Coefficients for the numerator of the Remez rational approximation.       */
#define A00 (+1.1283792500936792357468612282246335754294528093032E+00F)
#define A01 (+1.4404785710085938449469430497075715069787385141856E-01F)
#define A02 (+3.8671193332867291322816068826200285448434050179743E-02F)
#define A03 (+4.7012258030347397778439878660187630172746911222722E-04F)

/*  Coefficients for the denominator of the Remez rational approximation.     */
#define B00 (+1.0000000000000000000000000000000000000000000000000E+00F)
#define B01 (+4.6099523556810747961213984923160441469503967403520E-01F)
#define B02 (+8.7919480381435851752733729146603316335501327058064E-02F)
#define B03 (+7.4722501454901781876838346974059155836429539254916E-03F)

#define TMPL_NUM_EVAL(z) A00 + z*(A01 + z*(A02 + z*A03))
#define TMPL_DEN_EVAL(z) B00 + z*(B01 + z*(B02 + z*B03))

TMPL_STATIC_INLINE
float tmpl_Float_Erf_Medium(float x)
{
    const float x2 = x*x;
    const float p = TMPL_NUM_EVAL(x2);
    const float q = TMPL_DEN_EVAL(x2);
    return x * p / q;
}

#endif
/*  End of #if TMPL_HAS_IEEE754_FLOAT == 1.                                   */

#include "tmpl_math_undef.h"

#endif
/*  End of include guard.                                                     */
