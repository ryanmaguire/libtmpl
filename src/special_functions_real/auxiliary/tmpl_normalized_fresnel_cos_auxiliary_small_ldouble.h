/******************************************************************************
 *                                  LICENSE                                   *
 ******************************************************************************
 *  This file is part of libtmpl.                                             *
 *                                                                            *
 *  libtmpl is free software: you can redistribute it and/or modify           *
 *  it under the terms of the GNU General Public License as published by      *
 *  the Free Software Foundation, either version 3 of the License, or         *
 *  (at your option) any later version.                                       *
 *                                                                            *
 *  libtmpl is distributed in the hope that it will be useful,                *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *  GNU General Public License for more details.                              *
 *                                                                            *
 *  You should have received a copy of the GNU General Public License         *
 *  along with libtmpl.  If not, see <https://www.gnu.org/licenses/>.         *
 ******************************************************************************
 *             tmpl_normalized_fresnel_cos_auxiliary_small_ldouble            *
 ******************************************************************************
 *  Purpose:                                                                  *
 *      Computes the normalized Fresnel cosine for mid-sized inputs.          *
 ******************************************************************************
 *                             DEFINED FUNCTIONS                              *
 ******************************************************************************
 *  Function Name:                                                            *
 *      tmpl_LDouble_Normalized_Fresnel_Cos_Auxiliary_Small                   *
 *  Purpose:                                                                  *
 *      Computes C(x) for 2 <= x < 4.                                         *
 *  Arguments:                                                                *
 *      x (long double):                                                      *
 *          A real number.                                                    *
 *  Output:                                                                   *
 *      C_x (long double):                                                    *
 *          The normalized Fresnel cosine of x.                               *
 *  Called Functions:                                                         *
 *      tmpl_math.h:                                                          *
 *          tmpl_LDouble_SinCosPi:                                            *
 *              Simultaneously computes sin(pi x) and cos(pi x).              *
 *  Method:                                                                   *
 *      64-Bit Double / 80-Bit Extended / Portable:                           *
 *          The normalized Fresnel functions are asymptotic to 1/2 as x       *
 *          tends to positive infinity. They also have highly oscillatory     *
 *          behavior and can be approximated using cosine and sine. That is,  *
 *          we may use auxiliary functions f and g to write:                  *
 *                                                                            *
 *              C(x) = 0.5 + f(x) cos(pi/2 x^2) - g(x) sin(pi/2 x^2)          *
 *              S(x) = 0.5 - f(x) sin(pi/2 x^2) - g(x) cos(pi/2 x^2)          *
 *                                                                            *
 *          Solving for f and g gives us the following:                       *
 *                                                                            *
 *              f(x) = sin(pi/2 x^2) (C(x)-0.5) - cos(pi/2 x^2) (S(x)-0.5)    *
 *              g(x) = -sin(pi/2 x^2) (S(x)-0.5) - cos(pi/2 x^2) (C(x)-0.5)   *
 *                                                                            *
 *          We shift the interval [4, infty):                                 *
 *                                                                            *
 *              t = 1 / x                                                     *
 *                                                                            *
 *          And compute rational Remez approximations for f(t) and g(t).      *
 *          We must be careful when squaring. Naively squaring a large number *
 *          may lead precision loss in the calculation of sin(pi/2 x^2) and   *
 *          cos(pi/2 x^2). We split the input into two parts to relieve us    *
 *          of this issue. That is, we write:                                 *
 *                                                                            *
 *                             x = xhi + xlo                                  *
 *                        => x^2 = xhi^2 + 2 xhi xlo + xlo^2                  *
 *              => cos(pi/2 x^2) = cos(u) cos(v) - sin(u) sin(v)              *
 *              => sin(pi/2 x^2) = cos(u) sin(v) + sin(u) cos(v)              *
 *                                                                            *
 *          where u = pi/2 xhi^2 and v = pi/2 (2 xhi xlo + xlo^2). v is small *
 *          enough that cos(v) and sin(v) can be computed using small Taylor  *
 *          polynomials. cos(u) and sin(u) are computed in their entirety.    *
 *      128-Bit Double-Double / 128-Bit Quadruple:                            *
 *          Nearly the same, except that the Remez algorithm failed to        *
 *          converge for the large sizes required for double-double and       *
 *          quadruple. So instead two Pade approximants are used, one on the  *
 *          interval [2, 2.5), and another on the interval [2.5, 4.0].        *
 *  Notes:                                                                    *
 *      This function assumes the input is between 2 and 4.                   *
 ******************************************************************************
 *                                DEPENDENCIES                                *
 ******************************************************************************
 *  1.) tmpl_config.h:                                                        *
 *          Header file containing TMPL_STATIC_INLINE macro.                  *
 ******************************************************************************
 *  Author:     Ryan Maguire                                                  *
 *  Date:       July 8, 2024                                                  *
 ******************************************************************************/

/*  Include guard to prevent including this file twice.                       */
#ifndef TMPL_NORMALIZED_FRESNEL_COS_AUXILIARY_SMALL_LDOUBLE_H
#define TMPL_NORMALIZED_FRESNEL_COS_AUXILIARY_SMALL_LDOUBLE_H

/*  TMPL_STATIC_INLINE macro found here.                                      */
#include <libtmpl/include/tmpl_config.h>

/*  Used to compute sin(pi t) and cos(pi t) simultaneously.                   */
extern void
tmpl_LDouble_SinCosPi(long double t, long double *sin_t, long double *cos_t);

/*  Different splitting values are needed, depending on the type. The magic   *
 *  number is 2^(N - round(N/2 - 1)) + 1, where N is the number of bits in    *
 *  the mantissa. Thus xhi and xlo both have, roughly, half the bits of x.    */
#if TMPL_LDOUBLE_TYPE == TMPL_LDOUBLE_64_BIT

/******************************************************************************
 *                                64-Bit Double                               *
 ******************************************************************************/

/*  52-bit mantissa, magic number is 2^27 + 1.                                */
#define TMPL_LDOUBLE_SPLIT (+1.34217729E+08L)

/*  Coefficients for the numerator of the "f" auxiliary function.             */
#define A00 (+2.5703724299657391880484846679213652814012552703086E-07L)
#define A01 (+3.1830090055989159443079660141643697380527143958367E-01L)
#define A02 (-5.8364360938790173766825869667058317208792477494973E-01L)
#define A03 (+2.1270894621813623233357731534627057397142961709989E+00L)
#define A04 (-1.3707938560959418037898894458374663307834900805917E+00L)
#define A05 (+2.5885155851674980284912655727964308957274722252260E+00L)
#define A06 (+1.1096318379407176910580428607896631060221419264663E-01L)
#define A07 (+1.5677269150255168623117903590862822519021085751393E-01L)

/*  Coefficients for the denominator of the "f" auxiliary function.           */
#define B00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define B01 (-1.8340061067984813713149842839488538605288002066046E+00L)
#define B02 (+6.6862881102108010107333439887856875158324172145474E+00L)
#define B03 (-4.3270587876109819201264786452599507842454214366160E+00L)
#define B04 (+8.4987835739785486837778649463261557667671771347990E+00L)
#define B05 (-2.6581276744363058729791325678478430945922854114764E-01L)
#define B06 (+2.2005566252691005977332094546307120239536233286139E+00L)

/*  Coefficients for the numerator of the "g" auxiliary function.             */
#define C00 (-1.5037922851806219733961438088877029730210353047650E-07L)
#define C01 (+5.8825135283577460507410927514017802605784905819186E-06L)
#define C02 (-1.0404950252132407674352474461119774828636605755187E-04L)
#define C03 (+1.0241463717486993400039703075086120344700114645998E-01L)
#define C04 (-1.8819547496642853895882397386460270632119181024707E-01L)
#define C05 (+8.3903448432340481802419018665178495348306087113855E-01L)
#define C06 (-6.1254499526256925705463330744836837221709800954563E-01L)
#define C07 (+1.5116321008288957217408083103517520076531766119719E+00L)

/*  Coefficients for the denominator of the "g" auxiliary function.           */
#define D00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define D01 (-1.7830899368808261165532882721325366394047352626272E+00L)
#define D02 (+7.9327411271741694324594596490129404224576060387241E+00L)
#define D03 (-4.9327126910218758142609575150656502509143664321137E+00L)
#define D04 (+1.4055732441050503326502540808950918539606318078526E+01L)
#define D05 (+7.8731074657517163897183369777297374492877974905501E-01L)
#define D06 (+7.0782106464978070017788685865819834136757486939388E+00L)
#define D07 (+2.6225196697592760185024826482142321645031047869881E+00L)

/*  Evaluates the numerator of the "f" function using Horner's method.        */
#define TMPL_POLYA_EVAL(z) \
A00+z*(A01+z*(A02+z*(A03+z*(A04+z*(A05+z*(A06+z*A07))))))

/*  Evaluates the denominator of the "f" function using Horner's method.      */
#define TMPL_POLYB_EVAL(z) \
B00+z*(B01+z*(B02+z*(B03+z*(B04+z*(B05+z*B06)))))

/*  Evaluates the numerator of the "g" function using Horner's method.        */
#define TMPL_POLYC_EVAL(z) \
C00+z*(C01+z*(C02+z*(C03+z*(C04+z*(C05+z*(C06+z*C07))))))

/*  Evaluates the denominator of the "g" function using Horner's method.      */
#define TMPL_POLYD_EVAL(z) \
D00+z*(D01+z*(D02+z*(D03+z*(D04+z*(D05+z*(D06+z*D07))))))

/*  Quadruple precision. The Remez algorithm failed to converge, so instead   *
 *  we use two Pade approximants (for both "f" and "g"), and hence need eight *
 *  sets of coefficients.                                                     */
#elif TMPL_LDOUBLE_TYPE == TMPL_LDOUBLE_128_BIT

/******************************************************************************
 *                              128-Bit Quaduple                              *
 ******************************************************************************/

/*  112-bit mantissa, splitting number is 2^57 + 1.                           */
#define TMPL_LDOUBLE_SPLIT (+1.44115188075855873E+17L)

/*  Coefficients for the numerator of the Pade "f" approximant on [2, 2.5).   */
#define A00 (+1.5658432163630175780469918404193154311345818779748E-01L)
#define A01 (+4.4613731941247390152474728733380910202606125528735E-01L)
#define A02 (+6.2837988794256362122092733555528642300632014163479E-01L)
#define A03 (+5.7609890241747779959023248635120023021632450859662E-01L)
#define A04 (+3.8230607484979813449030841999414691469960954403879E-01L)
#define A05 (+1.9373562057502802554707662984156981997254300047564E-01L)
#define A06 (+7.7183030773854474853920890839076193298927962289163E-02L)
#define A07 (+2.4534892720414679424668760657233169185250503449468E-02L)
#define A08 (+6.2513308072479218649397952933940549291834564719275E-03L)
#define A09 (+1.2707063293802772431955809147051534264224885033573E-03L)
#define A10 (+2.0298356527616639962788207200657925376681656968884E-04L)
#define A11 (+2.4738136681625033650199914579877561910543542202683E-05L)
#define A12 (+2.1783952697619342001709987680370309269087737478913E-06L)
#define A13 (+1.2438867739691402754325935696192918639767253553585E-07L)
#define A14 (+3.4890483805907052489323693623442754882815224278113E-09L)
#define A15 (-3.4596402721593121141741801850628465671457534670707E-15L)
#define A16 (+8.8462529422178506390506929051135664426012813402836E-17L)

/*  Coefficients for the denominator of the Pade "f" approximant on [2, 2.5). */
#define B00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define B01 (+3.3205326071978632678148487841324593820389760334696E+00L)
#define B02 (+5.3719597799054149099546045685539012437086726401765E+00L)
#define B03 (+5.6069708683957429524334432206406876763465670330943E+00L)
#define B04 (+4.2176386719011383380012136866221138296998404207373E+00L)
#define B05 (+2.4202026646111871899371822821713504695652433043551E+00L)
#define B06 (+1.0940704522561984453500290876185886810691058268937E+00L)
#define B07 (+3.9672817409576761825733854766524988994302446870214E-01L)
#define B08 (+1.1637067894865374167577222962742452113658690413411E-01L)
#define B09 (+2.7624649247089991205652187072946944745744961877864E-02L)
#define B10 (+5.2675282677888555364459581038914017813745911859778E-03L)
#define B11 (+7.9312835987591474090477189511864431820012212424795E-04L)
#define B12 (+9.1404571848233837230699178756492364231401427342391E-05L)
#define B13 (+7.6251653487526666205800199546230942241585793020501E-06L)
#define B14 (+4.1270330157679065506067457969177919942981625235873E-07L)
#define B15 (+1.0960954002619175810160779575888197857878198827317E-08L)

/*  Coefficients for the numerator of the Pade "g" approximant on [2, 2.5).   */
#define C00 (+1.1746593924659245499776496642738962311632845490785E-02L)
#define C01 (+2.0171172780354119799677844390064533621697388670538E-02L)
#define C02 (+1.9151795823632584051604491350504334794659676039863E-02L)
#define C03 (+1.2191904271154746336848416492606533962964385204433E-02L)
#define C04 (+5.7068999571364255245468092689537990076001978663906E-03L)
#define C05 (+2.0434418080844075287856635674491278116827854766218E-03L)
#define C06 (+5.6922223786248013382344642503530756896778461435314E-04L)
#define C07 (+1.2400429060133826828913849331922431902625385734885E-04L)
#define C08 (+2.0835693634509915286990497507509997013845293699178E-05L)
#define C09 (+2.6413267008662548745068417833189878227836617079671E-06L)
#define C10 (+2.3748831177399435016608191027856805007856198123547E-07L)
#define C11 (+1.3807519818547347811122152473761694414529412930138E-08L)
#define C12 (+3.7222200001322840795167382103447434892360789652454E-10L)
#define C13 (+9.0923892954620825792452702042061010737735753464405E-13L)
#define C14 (-6.5491531879647030427330415722790698572668080378955E-14L)
#define C15 (+3.1690069964489481155143128797493199962451185572709E-15L)
#define C16 (-7.7742147861796946563696745664333822935155464389372E-17L)

/*  Coefficients for the denominator of the Pade "g" approximant on [2, 2.5). */
#define D00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define D01 (+3.0922039165931219571555775542070429909543741180579E+00L)
#define D02 (+4.6824220838935257164259309833848704272954642836068E+00L)
#define D03 (+4.5886493052153886566729425175669825749889592364141E+00L)
#define D04 (+3.2467010324578897379251460370442394037692533199340E+00L)
#define D05 (+1.7540190988648907332752975486008800962724123641239E+00L)
#define D06 (+7.4661520996200110156894056596333579908875299834561E-01L)
#define D07 (+2.5478176783947816482132665512329204886866423761408E-01L)
#define D08 (+7.0241715172781749140831965433045212970210875760770E-02L)
#define D09 (+1.5640553913244451092770309854282570082332999419175E-02L)
#define D10 (+2.7894548844098325640096395687150975876449127959804E-03L)
#define D11 (+3.9129676257053540681258047076244141394331899805817E-04L)
#define D12 (+4.1790106680062194823994704818333292163868770864301E-05L)
#define D13 (+3.2073970519483596316271500204520460951476783877022E-06L)
#define D14 (+1.5810279506434615321166027032277635888874427850943E-07L)
#define D15 (+3.7672269609312769237129556400414870540855700824760E-09L)

/*  Coefficients for the numerator of the Pade "f" approximant on [2.5, 4].   */
#define E00 (+1.0572078929768562955616107428715469714522411993832E-01L)
#define E01 (+3.3075713265190629856730151393806726833602096835605E-01L)
#define E02 (+5.0638925274356859726650312713385707337984345000219E-01L)
#define E03 (+5.0243196478364145980938817526830024902414879866651E-01L)
#define E04 (+3.6112014284839621717962218091746234571633389367250E-01L)
#define E05 (+1.9925544880339986880224339170570686335979725086926E-01L)
#define E06 (+8.7311300756520119080680935561045288576087383893129E-02L)
#define E07 (+3.1012271862008387765673661856642549279021433146033E-02L)
#define E08 (+9.0352939005483609039723665770518250001287368331630E-03L)
#define E09 (+2.1709222544882294965643803694896746392830781693499E-03L)
#define E10 (+4.3011267117605367766338746334742086631047440235174E-04L)
#define E11 (+6.9869365930219360504738490265910526835493541920651E-05L)
#define E12 (+9.1932974491794601149829136285725588127150881565564E-06L)
#define E13 (+9.5951080959194784584423073655954320790574648430618E-07L)
#define E14 (+7.6745589160745976089885635886558451283498949300049E-08L)
#define E15 (+4.4352981633292726839515620647584379892821318182892E-09L)
#define E16 (+1.6548724385785778717530072804513618662964717728278E-10L)
#define E17 (+3.0044118762663287015665884456575533744194935728548E-12L)
#define E18 (-3.0876205013164234734736920295070501332906000707287E-23L)

/*  Coefficients for the denominator of the Pade "f" approximant on [2.5, 4]. */
#define F00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define F01 (+3.4572793218213839818915911474951112705710486217827E+00L)
#define F02 (+5.8203313697166648361784046113972370305371391171780E+00L)
#define F03 (+6.3324194114265382757328681107812703672537573622393E+00L)
#define F04 (+4.9852044363825075456819767965639169462882604016170E+00L)
#define F05 (+3.0137601718119122778312995658849479842386988586159E+00L)
#define F06 (+1.4492918897066753112694360006333708677818513216919E+00L)
#define F07 (+5.6668760648101670515515724806513147535128901593155E-01L)
#define F08 (+1.8260535772677019645716869220496883255702170430269E-01L)
#define F09 (+4.8849196707028984631808173078502246866083507807532E-02L)
#define F10 (+1.0874316033535776063349464067343697108010422400376E-02L)
#define F11 (+2.0097849954846743937976898093951477065121613938514E-03L)
#define F12 (+3.0614884191957049928009737933543136077404997532079E-04L)
#define F13 (+3.7924904273332086447026272075957687498114393088939E-05L)
#define F14 (+3.7377051161996599081346339420425510274722588877279E-06L)
#define F15 (+2.8290507952886613768449726907817767580708766141161E-07L)
#define F16 (+1.5493580651957425234045314234809189429805951301881E-08L)
#define F17 (+5.4820942456285046885402934091238494220927337670351E-10L)
#define F18 (+9.4386382730370109741129245886329823681874620384298E-12L)

/*  Coefficients for the numerator of the Pade "g" approximant on [2.5, 4].   */
#define G00 (+3.6870010326249639023877347008878961435329654167589E-03L)
#define G01 (+9.3612547236397542280429620166667972023132902964636E-03L)
#define G02 (+1.1852553675577991679737548536729780633680496568551E-02L)
#define G03 (+9.8160285369874875596980698264396050716954889496586E-03L)
#define G04 (+5.9117931234707773053282425351712751738553707082354E-03L)
#define G05 (+2.7323255159760162729406017645117535393601620039406E-03L)
#define G06 (+9.9868356339505867130365120119962564187789156590897E-04L)
#define G07 (+2.9347119232270207764192567877745314783585144257439E-04L)
#define G08 (+6.9832896190896049350496210332805204999570840807149E-05L)
#define G09 (+1.3448548509099415906916283462268987520644706388910E-05L)
#define G10 (+2.0787167769466251866430115705909599533515072714184E-06L)
#define G11 (+2.5331606536275697587172180014141602134472914794316E-07L)
#define G12 (+2.3574365433412516616266082637681695642563730555252E-08L)
#define G13 (+1.5834753015919497127800151128072610992685473721363E-09L)
#define G14 (+6.8760844771569878756757588008297368769517540366743E-11L)
#define G15 (+1.4589106127528001830028703188426724240331674407183E-12L)
#define G16 (-2.4151594875332333731810509411019176927693800982317E-20L)
#define G17 (+8.7292707171188169521133144385889374570729847009826E-22L)
#define G18 (-1.5936021547150769491356735808848951681857061546647E-23L)

/*  Coefficients for the denominator of the Pade "g" approximant on [2.5, 4]. */
#define H00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define H01 (+3.5167578313471641848836441315389991799971291876589E+00L)
#define H02 (+6.0255878553801980777781353637973359694086452571824E+00L)
#define H03 (+6.6757018070549174946790461581196581265471815941424E+00L)
#define H04 (+5.3545348274089841123131651241002482209707730791310E+00L)
#define H05 (+3.2999284270786924805770917659493934654735816781914E+00L)
#define H06 (+1.6187067922739931182952657138771730148889957517980E+00L)
#define H07 (+6.4602567791617059927145010909576605504882074677962E-01L)
#define H08 (+2.1262397441589165115069499111067916086768808747386E-01L)
#define H09 (+5.8139792926037375589538600753946291831467435859306E-02L)
#define H10 (+1.3240073689816051911429890316920133880600156758525E-02L)
#define H11 (+2.5055393123934966794723891128882346176003232573850E-03L)
#define H12 (+3.9118329239257081323343500287686964623941064669895E-04L)
#define H13 (+4.9722286444175412147659326182975023863544152853028E-05L)
#define H14 (+5.0344649429875931706689706807536581707909157426068E-06L)
#define H15 (+3.9203624801599764291794224647924424617458169548984E-07L)
#define H16 (+2.2124825105407785823726389482776919808693375022856E-08L)
#define H17 (+8.0823219281409543501524600986526292937389762837101E-10L)
#define H18 (+1.4398866193463318809680818308109724886367298634730E-11L)

/*  Evaluates the numerator of the "f" function using Horner's method.        */
#define TMPL_POLYA_EVAL(z) \
A00 + z*(\
  A01 + z*(\
    A02 + z*(\
      A03 + z*(\
        A04 + z*(\
          A05 + z*(\
            A06 + z*(\
              A07 + z*(\
                A08 + z*(\
                  A09 + z*(\
                    A10 + z*(\
                      A11 + z*(\
                        A12 + z*(\
                          A13 + z*(\
                            A14 + z*(\
                              A15 + z*A16\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "f" function using Horner's method.      */
#define TMPL_POLYB_EVAL(z) \
B00 + z*(\
  B01 + z*(\
    B02 + z*(\
      B03 + z*(\
        B04 + z*(\
          B05 + z*(\
            B06 + z*(\
              B07 + z*(\
                B08 + z*(\
                  B09 + z*(\
                    B10 + z*(\
                      B11 + z*(\
                        B12 + z*(\
                          B13 + z*(\
                            B14 + z*B15\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the numerator of the "g" function using Horner's method.        */
#define TMPL_POLYC_EVAL(z) \
C00 + z*(\
  C01 + z*(\
    C02 + z*(\
      C03 + z*(\
        C04 + z*(\
          C05 + z*(\
            C06 + z*(\
              C07 + z*(\
                C08 + z*(\
                  C09 + z*(\
                    C10 + z*(\
                      C11 + z*(\
                        C12 + z*(\
                          C13 + z*(\
                            C14 + z*(\
                              C15 + z*C16\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "g" function using Horner's method.      */
#define TMPL_POLYD_EVAL(z) \
D00 + z*(\
  D01 + z*(\
    D02 + z*(\
      D03 + z*(\
        D04 + z*(\
          D05 + z*(\
            D06 + z*(\
              D07 + z*(\
                D08 + z*(\
                  D09 + z*(\
                    D10 + z*(\
                      D11 + z*(\
                        D12 + z*(\
                          D13 + z*(\
                            D14 + z*D15\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the numerator of the "f" function using Horner's method.        */
#define TMPL_POLYE_EVAL(z) \
E00 + z*(\
  E01 + z*(\
    E02 + z*(\
      E03 + z*(\
        E04 + z*(\
          E05 + z*(\
            E06 + z*(\
              E07 + z*(\
                E08 + z*(\
                  E09 + z*(\
                    E10 + z*(\
                      E11 + z*(\
                        E12 + z*(\
                          E13 + z*(\
                            E14 + z*(\
                              E15 + z*(\
                                E16 + z*(\
                                  E17 + z*E18\
                                )\
                              )\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "f" function using Horner's method.      */
#define TMPL_POLYF_EVAL(z) \
F00 + z*(\
  F01 + z*(\
    F02 + z*(\
      F03 + z*(\
        F04 + z*(\
          F05 + z*(\
            F06 + z*(\
              F07 + z*(\
                F08 + z*(\
                  F09 + z*(\
                    F10 + z*(\
                      F11 + z*(\
                        F12 + z*(\
                          F13 + z*(\
                            F14 + z*(\
                              F15 + z*(\
                                F16 + z*(\
                                  F17 +z*F18\
                                )\
                              )\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the numerator of the "g" function using Horner's method.        */
#define TMPL_POLYG_EVAL(z) \
G00 + z*(\
  G01 + z*(\
    G02 + z*(\
      G03 + z*(\
        G04 + z*(\
          G05 + z*(\
            G06 + z*(\
              G07 + z*(\
                G08 + z*(\
                  G09 + z*(\
                    G10 + z*(\
                      G11 + z*(\
                        G12 + z*(\
                          G13 + z*(\
                            G14 + z*(\
                              G15 + z*(\
                                G16 + z*(\
                                  G17 + z*G18\
                                )\
                              )\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "g" function using Horner's method.      */
#define TMPL_POLYH_EVAL(z) \
H00 + z*(\
  H01 + z*(\
    H02 + z*(\
      H03 + z*(\
        H04 + z*(\
          H05 + z*(\
            H06 + z*(\
              H07 + z*(\
                H08 + z*(\
                  H09 + z*(\
                    H10 + z*(\
                      H11 + z*(\
                        H12 + z*(\
                          H13 + z*(\
                            H14 + z*(\
                              H15 + z*(\
                                H16 + z*(\
                                  H17 +z*H18\
                                )\
                              )\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

#elif TMPL_LDOUBLE_TYPE == TMPL_LDOUBLE_DOUBLEDOUBLE

/******************************************************************************
 *                            128-Bit Double-Double                           *
 ******************************************************************************/

/*  Coefficients for the numerator of the Pade "f" approximant on [2, 2.5).   */
#define A00 (+1.5658432163630175780469918404193154311345818779748E-01L)
#define A01 (+4.0851536175640322240478500808952052675998885510251E-01L)
#define A02 (+5.3227848594171659865019326599517387341972655348671E-01L)
#define A03 (+4.5287691056958093096008884621695555129558330763360E-01L)
#define A04 (+2.7878740104295226755209777967756647122883567029866E-01L)
#define A05 (+1.3063470767498710323050185547940067300386339319523E-01L)
#define A06 (+4.7826055131473996883911474482150692903942748621355E-02L)
#define A07 (+1.3835885224615194293501191072511355155725505679410E-02L)
#define A08 (+3.1618609148226765630056429355204790277495062885116E-03L)
#define A09 (+5.6400167664218096721946059999708294725130777321977E-04L)
#define A10 (+7.6418705916805446852016572669715855694742290263906E-05L)
#define A11 (+7.4635814657070579171902823467412882257513501198904E-06L)
#define A12 (+4.7248589862775267519926205545496615880497810703477E-07L)
#define A13 (+1.4722377190794387986897852337739453661833058784501E-08L)
#define A14 (-8.9202779724871369382681280272683292740190725452501E-16L)

/*  Coefficients for the denominator of the Pade "f" approximant on [2, 2.5). */
#define B00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define B01 (+3.0802661663248417572449631233152639094171274837043E+00L)
#define B02 (+4.6449743954236604621563456453824908391451844503486E+00L)
#define B03 (+4.5269166042479885436203264682183068217556138559629E+00L)
#define B04 (+3.1780284519691549842641378528012166391872499094279E+00L)
#define B05 (+1.6977094004416069658786074622488466751768505742998E+00L)
#define B06 (+7.1113874064929989490970802815459300165787474001272E-01L)
#define B07 (+2.3722368030104715345118121115630265551055274272649E-01L)
#define B08 (+6.3337951526481344122109027305370688589582163865595E-02L)
#define B09 (+1.3477387880325707431452772133808352737262809976717E-02L)
#define B10 (+2.2520281295716810877480008145390825613899146581173E-03L)
#define B11 (+2.8697180945629946727584801985700533195108041055444E-04L)
#define B12 (+2.6416219073590654337763495498126115177707040973396E-05L)
#define B13 (+1.5768639057888189097751252306260500338716642315119E-06L)
#define B14 (+4.6251594127704266270132296994135193501873182397942E-08L)

/*  Coefficients for the numerator of the Pade "g" approximant on [2, 2.5).   */
#define C00 (+1.1746593924659245499776496642738962311632845490785E-02L)
#define C01 (+2.0822129811760869102377184702666968644049739721137E-02L)
#define C02 (+1.9999002505185739814394392618041011897880603416351E-02L)
#define C03 (+1.2785578390830429474648615707009513033154278498136E-02L)
#define C04 (+5.9480464743469249836191575236351727892396940587485E-03L)
#define C05 (+2.0928629359984660633207598638769922061418617944671E-03L)
#define C06 (+5.6442846938285308281153032275112962037719284265001E-04L)
#define C07 (+1.1652455433805382807209062391911688699237481615563E-04L)
#define C08 (+1.7988498430015832626553153030638133302771266209926E-05L)
#define C09 (+1.9850722354585449885735158362187374429934941929739E-06L)
#define C10 (+1.4063708576334009333461724762363655455337888698655E-07L)
#define C11 (+4.9249264901687723863981852366941419802424255124140E-09L)
#define C12 (-1.6579206292671395660083214639884246494062666453769E-12L)
#define C13 (+9.1896438154100803019374941510916368799914179214710E-14L)
#define C14 (-2.5767813682813433283897287406716184885334812368208E-15L)

/*  Coefficients for the denominator of the Pade "g" approximant on [2, 2.5). */
#define D00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define D01 (+3.1476205791237144395073505937057044415355723424179E+00L)
#define D02 (+4.8307441847478226902227050007190637115414833133795E+00L)
#define D03 (+4.7766447533203010601290666120848614336183936621558E+00L)
#define D04 (+3.3933429330444034540231176775214861266574899604650E+00L)
#define D05 (+1.8300368456682864769292517996375150182354064313764E+00L)
#define D06 (+7.7217248718878105452673402262326314509144881854648E-01L)
#define D07 (+2.5890330332226954677812185544517523176628148252069E-01L)
#define D08 (+6.9327056177265665327457450517856520412570092246280E-02L)
#define D09 (+1.4760189954887072174743246410377511715088022944433E-02L)
#define D10 (+2.4615241162090515296263826262385307407980119323311E-03L)
#define D11 (+3.1215257758893085001089400223629590365003504141416E-04L)
#define D12 (+2.8499023087665065753692524176064001797274299239746E-05L)
#define D13 (+1.6802698800170747264878582445395466964438735740915E-06L)
#define D14 (+4.8409515628556060394827374448372757010409841110936E-08L)

/*  Coefficients for the numerator of the Pade "f" approximant on [2.5, 4].   */
#define E00 (+1.0572078929768562955616107428715469714522411993832E-01L)
#define E01 (+3.1348725298437470356882474167329237462098375438691E-01L)
#define E02 (+4.5192915609699524013786680612262986754247404106442E-01L)
#define E03 (+4.1896973524636962250105128443513552304810173494996E-01L)
#define E04 (+2.7880593428008967759892228735199108909636790400851E-01L)
#define E05 (+1.4088481823058841491190624575558842819436112509212E-01L)
#define E06 (+5.5796786928101631351325406263260931996519264812982E-02L)
#define E07 (+1.7626193873374553272282786331004622247567415300235E-02L)
#define E08 (+4.4764413987226236624184478404563585510320343873462E-03L)
#define E09 (+9.1387243979699887961993810034022322431836956902611E-04L)
#define E10 (+1.4876240017684756063743783092572693946635198807762E-04L)
#define E11 (+1.8967138589813483072891079378596198153315684162969E-05L)
#define E12 (+1.8343542359983993744667722461961242603063320015929E-06L)
#define E13 (+1.2712144485913849969673197749376192964159131972864E-07L)
#define E14 (+5.6496182958215704813984037556283302443904533187562E-09L)
#define E15 (+1.2152957451961268908093886726383811321619254217349E-10L)
#define E16 (-5.3547618528692150012651948912727209549798762275205E-21L)

/*  Coefficients for the denominator of the Pade "f" approximant on [2.5, 4]. */
#define F00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define F01 (+3.2939256448174831424903948610887033013191661264553E+00L)
#define F02 (+5.2515075735928263835750215649607826260630125255618E+00L)
#define F03 (+5.3732954361836011915449568873630692680608587326810E+00L)
#define F04 (+3.9461948156900878589489429887754580684255186379361E+00L)
#define F05 (+2.2045129817398482446583847834481897049917546211129E+00L)
#define F06 (+9.6869651943359495617898765967763709703214823324848E-01L)
#define F07 (+3.4146055492332244086464624358264391477014317258277E-01L)
#define F08 (+9.7571373647027404631027011405654221192805000686198E-02L)
#define F09 (+2.2677119405213661600191116845136596010395641346147E-02L)
#define F10 (+4.2731466350371719925309467613717160096652870554712E-03L)
#define F11 (+6.4611628417219521724967087104411794208643773492792E-04L)
#define F12 (+7.6875520638275481796675965736825156009559049188694E-05L)
#define F13 (+6.9608851879415608884916763328150916660669598975953E-06L)
#define F14 (+4.5261019495353969500483860008036783276583099039901E-07L)
#define F15 (+1.8894188609081396580688966815011155772152050083427E-08L)
#define F16 (+3.8179641764712837993798908877213384958577772929840E-10L)

/*  Coefficients for the numerator of the Pade "g" approximant on [2.5, 4].   */
#define G00 (+3.6870010326249639023877347008878961435329654167589E-03L)
#define G01 (+8.1996738841790182332796542544649147985765452024936E-03L)
#define G02 (+9.1055563744544700097165754985353998314645645750838E-03L)
#define G03 (+6.5765421897153553849843662678959235493297907387812E-03L)
#define G04 (+3.4217475086250844743918936057766375601896256134934E-03L)
#define G05 (+1.3481540535803049778792699348572561855299258090210E-03L)
#define G06 (+4.1266476275448339733559795907502424048368158664620E-04L)
#define G07 (+9.9189155960685599151183202585910776194843981584641E-05L)
#define G08 (+1.8704476959215964029814926988396803775129767189088E-05L)
#define G09 (+2.7323381731311411380169549344292947889383483276752E-06L)
#define G10 (+3.0064906000287516976953819704353951947238716561346E-07L)
#define G11 (+2.3621518344677349184143859308547066273862207985868E-08L)
#define G12 (+1.1900007746755900923510229241920123063185695848314E-09L)
#define G13 (+2.9123738674245860103869992420907885822583826595396E-11L)
#define G14 (+5.2881398222139933527336715653398471086160975908562E-18L)
#define G15 (-1.8892376462543676997734464131284578591370028129016E-19L)
#define G16 (+3.4619974122095542713083673046215491011836099653431E-21L)

/*  Coefficients for the denominator of the Pade "g" approximant on [2.5, 4]. */
#define H00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define H01 (+3.2017102278389689598824371622278873717173387099780E+00L)
#define H02 (+4.9724948634959321770564337947690854225146949412636E+00L)
#define H03 (+4.9651442057615452051870385693760014157707281771525E+00L)
#define H04 (+3.5639596364107999710976097317002978753378172247448E+00L)
#define H05 (+1.9485496323172514461900649786425215041844947411384E+00L)
#define H06 (+8.3898853160239248680145106726419840631049466783151E-01L)
#define H07 (+2.9011141644343343609706796168492249564595446279081E-01L)
#define H08 (+8.1407701377773603184395925125956558986605415871607E-02L)
#define H09 (+1.8599520607903966455093678630762303534560315054146E-02L)
#define H10 (+3.4489430044924249855597130271850607497094878208937E-03L)
#define H11 (+5.1373758101012047487081593959201907464701341196975E-04L)
#define H12 (+6.0284879634496878581082163416808109444100998850908E-05L)
#define H13 (+5.3903735937459866852314739964422205830919456614353E-06L)
#define H14 (+3.4659951548439214041454539740081790144358938263254E-07L)
#define H15 (+1.4331789348706937829626499335183378680006814237028E-08L)
#define H16 (+2.8744077492262646329589371746055034074953096063257E-10L)

/*  Evaluates the numerator of the "f" function using Horner's method.        */
#define TMPL_POLYA_EVAL(z) \
A00 + z*(\
  A01 + z*(\
    A02 + z*(\
      A03 + z*(\
        A04 + z*(\
          A05 + z*(\
            A06 + z*(\
              A07 + z*(\
                A08 + z*(\
                  A09 + z*(\
                    A10 + z*(\
                      A11 + z*(\
                        A12 + z*(\
                          A13 + z*A14\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "f" function using Horner's method.      */
#define TMPL_POLYB_EVAL(z) \
B00 + z*(\
  B01 + z*(\
    B02 + z*(\
      B03 + z*(\
        B04 + z*(\
          B05 + z*(\
            B06 + z*(\
              B07 + z*(\
                B08 + z*(\
                  B09 + z*(\
                    B10 + z*(\
                      B11 + z*(\
                        B12 + z*(\
                          B13 + z*B14\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the numerator of the "g" function using Horner's method.        */
#define TMPL_POLYC_EVAL(z) \
C00 + z*(\
  C01 + z*(\
    C02 + z*(\
      C03 + z*(\
        C04 + z*(\
          C05 + z*(\
            C06 + z*(\
              C07 + z*(\
                C08 + z*(\
                  C09 + z*(\
                    C10 + z*(\
                      C11 + z*(\
                        C12 + z*(\
                          C13 + z*C14\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "g" function using Horner's method.      */
#define TMPL_POLYD_EVAL(z) \
D00 + z*(\
  D01 + z*(\
    D02 + z*(\
      D03 + z*(\
        D04 + z*(\
          D05 + z*(\
            D06 + z*(\
              D07 + z*(\
                D08 + z*(\
                  D09 + z*(\
                    D10 + z*(\
                      D11 + z*(\
                        D12 + z*(\
                          D13 + z*D14\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the numerator of the "f" function using Horner's method.        */
#define TMPL_POLYE_EVAL(z) \
E00 + z*(\
  E01 + z*(\
    E02 + z*(\
      E03 + z*(\
        E04 + z*(\
          E05 + z*(\
            E06 + z*(\
              E07 + z*(\
                E08 + z*(\
                  E09 + z*(\
                    E10 + z*(\
                      E11 + z*(\
                        E12 + z*(\
                          E13 + z*(\
                            E14 + z*(\
                              E15 + z*E16\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "f" function using Horner's method.      */
#define TMPL_POLYF_EVAL(z) \
F00 + z*(\
  F01 + z*(\
    F02 + z*(\
      F03 + z*(\
        F04 + z*(\
          F05 + z*(\
            F06 + z*(\
              F07 + z*(\
                F08 + z*(\
                  F09 + z*(\
                    F10 + z*(\
                      F11 + z*(\
                        F12 + z*(\
                          F13 + z*(\
                            F14 + z*(\
                              F15 + z*F16\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the numerator of the "g" function using Horner's method.        */
#define TMPL_POLYG_EVAL(z) \
G00 + z*(\
  G01 + z*(\
    G02 + z*(\
      G03 + z*(\
        G04 + z*(\
          G05 + z*(\
            G06 + z*(\
              G07 + z*(\
                G08 + z*(\
                  G09 + z*(\
                    G10 + z*(\
                      G11 + z*(\
                        G12 + z*(\
                          G13 + z*(\
                            G14 + z*(\
                              G15 + z*G16\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Evaluates the denominator of the "g" function using Horner's method.      */
#define TMPL_POLYH_EVAL(z) \
H00 + z*(\
  H01 + z*(\
    H02 + z*(\
      H03 + z*(\
        H04 + z*(\
          H05 + z*(\
            H06 + z*(\
              H07 + z*(\
                H08 + z*(\
                  H09 + z*(\
                    H10 + z*(\
                      H11 + z*(\
                        H12 + z*(\
                          H13 + z*(\
                            H14 + z*(\
                              H15 + z*H16\
                            )\
                          )\
                        )\
                      )\
                    )\
                  )\
                )\
              )\
            )\
          )\
        )\
      )\
    )\
  )\
)

/*  Extended precision / portable, uses Remez polynomials again.              */
#else

/******************************************************************************
 *                         80-Bit Extended / Portable                         *
 ******************************************************************************/

/*  63-bit mantissa, magic number is 2^32 + 1.                                */
#define TMPL_LDOUBLE_SPLIT (+4.294967297E+09L)

/*  Coefficients for the numerator of the Remez rational approximation.       */
#define A00 (-1.0684376308340724432025730534298461179595627608839E-07L)
#define A01 (+3.1831475507382908907436560739654094704655840289067E-01L)
#define A02 (-1.1691864490468752274496177092758262888145527574071E+00L)
#define A03 (+3.9409200441662731221883070231880176057811429695469E+00L)
#define A04 (-6.7589737445619862915002132160398916278459771763963E+00L)
#define A05 (+9.4986133969479122796591921298804826336413979007579E+00L)
#define A06 (-8.5201250401012482837277174197615382814466570440382E+00L)
#define A07 (+4.5625561925663269287610965386315900179159795465143E+00L)
#define A08 (-2.4385227117045454507957037146789833022612661919264E+00L)
#define A09 (+3.2467602439918592010128784434067344948770860567324E-01L)

/*  Coefficients for the denominator of the Remez rational approximation.     */
#define B00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define B01 (-3.6727865635753519146261099845230432571763174073947E+00L)
#define B02 (+1.2376668060570839227915084796148735391713521410824E+01L)
#define B03 (-2.1198583589431644898957383222605583593980695178268E+01L)
#define B04 (+2.9928236080139393717578934000935111892149848313185E+01L)
#define B05 (-2.6925372310220261848386850478758660128825212101045E+01L)
#define B06 (+1.5053228187476554515978954420922810125000888756659E+01L)
#define B07 (-7.4250796277566903355299684658516407963152500653400E+00L)

/*  Coefficients for the numerator of the "g" auxiliary function.             */
#define C00 (+1.0485948414877299756026099010947069605766083080547E-08L)
#define C01 (-6.2675353496879723790707760439112099174351140430523E-07L)
#define C02 (+1.6157813977029744657751760460754637142840353407800E-05L)
#define C03 (+1.0107925570717432891687083398118253337575121447993E-01L)
#define C04 (-2.4696130322119574201406599205068641996293261986291E-01L)
#define C05 (+1.0389424433892448999996716101998646847000255104927E+00L)
#define C06 (-1.0931615441586762396288421499608784614547147220815E+00L)
#define C07 (+2.0801992070139092044205184623801525848580842543664E+00L)
#define C08 (-2.7359388150628835023692179999735168149409711746964E-01L)

/*  Coefficients for the denominator of the "g" auxiliary function.           */
#define D00 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define D01 (-2.4606601098697052193896760763504495065632725868142E+00L)
#define D02 (+1.0408281107244679999922957045526072434460050494146E+01L)
#define D03 (-1.1490821904706329179022298574742062311850927483567E+01L)
#define D04 (+2.4129956371189741835294671964470165275796070605972E+01L)
#define D05 (-9.6587182396203406739135834064395774658290258771738E+00L)
#define D06 (+1.4405969464170908380666236557726676286652159875821E+01L)
#define D07 (-3.1349041584607820539197661461342658487081947322258E-01L)

/*  Evaluates the numerator of the "f" function using Horner's method.        */
#define TMPL_POLYA_EVAL(z) \
A00+z*(A01+z*(A02+z*(A03+z*(A04+z*(A05+z*(A06+z*(A07+z*(A08+z*A09))))))))

/*  Evaluates the denominator of the "f" function using Horner's method.      */
#define TMPL_POLYB_EVAL(z) \
B00+z*(B01+z*(B02+z*(B03+z*(B04+z*(B05+z*(B06+z*B07))))))

/*  Evaluates the numerator of the "g" function using Horner's method.        */
#define TMPL_POLYC_EVAL(z) \
C00+z*(C01+z*(C02+z*(C03+z*(C04+z*(C05+z*(C06+z*(C07+z*C08)))))))

/*  Evaluates the denominator of the "g" function using Horner's method.      */
#define TMPL_POLYD_EVAL(z) \
D00+z*(D01+z*(D02+z*(D03+z*(D04+z*(D05+z*(D06+z*D07))))))

#endif
/*  End of double vs. extended / portable vs. double-double vs. quadruple.    */

/*  Coefficients for the Taylor polynomial of cos(pi/2 x^2).                  */
#define C0 (+1.0000000000000000000000000000000000000000000000000E+00L)
#define C1 (-1.2337005501361698273543113749845188919142124259051E+00L)

/*  Coefficients for the Taylor polynomial of sin(pi/2 x^2).                  */
#define S0 (+1.5707963267948966192313216916397514420985846996876E+00L)
#define S1 (-6.4596409750624625365575656389794573337969351178927E-01L)

/*  Helper macros for cos and sin.                                            */
#define TMPL_COS_TAYLOR(z) (C0 + z*C1)
#define TMPL_SIN_TAYLOR(z) (S0 + z*S1)

/*  Function for computing the normalized Fresnel cosine for 2 <= x < 4.      */
TMPL_STATIC_INLINE
long double tmpl_LDouble_Normalized_Fresnel_Cos_Auxiliary_Small(long double x)
{
    /*  Use the double-double trick, split x into two parts, high and low.    *
     *  This results in xhi and xlo both having half of the bits of x.        */
#if TMPL_LDOUBLE_TYPE == TMPL_LDOUBLE_DOUBLEDOUBLE
    const double x_double = (double)x;
    const long double xhi = (long double)x_double;
#else
    const long double split = TMPL_LDOUBLE_SPLIT * x;
    const long double xhi = split - (split - x);
#endif
    const long double xlo = x - xhi;

    /*  With v = pi/2 (2 xlo xhi + xlo^2), compute cos(v) and sin(v) using    *
     *  Taylor polynomials. v is small, only a few terms needed.              */
    const long double v = 2.0L * xhi * xlo + xlo * xlo;
    const long double v_sq = v * v;
    const long double cos_lo = TMPL_COS_TAYLOR(v_sq);
    const long double sin_lo = v * TMPL_SIN_TAYLOR(v_sq);

    /*  Variables for storing the values of sine and cosine.                  */
    long double cos_hi, sin_hi, cos_x, sin_x;

    /*  The auxiliary function "f" and "g" are computed in different ways,    *
     *  depending on how long double is represented. For quadruple and        *
     *  double-double precisions, we use two Pade approximants.               */
#if TMPL_LDOUBLE_TYPE == TMPL_LDOUBLE_128_BIT || \
    TMPL_LDOUBLE_TYPE == TMPL_LDOUBLE_DOUBLEDOUBLE

    /*  Declare variables for the auxiliary functions.                        */
    long double f, g;

    /*  The first Pade approximant is performed on the interval [2, 2.5).     */
    if (x < 2.5L)
    {
        /*  The Pade approximant is computed near x = 2.0. Shift the variable.*/
        const long double t = x - 2.0L;

        /*  Evaluate the four polynomials using Horner's method.              */
        const long double fn = TMPL_POLYA_EVAL(t);
        const long double fd = TMPL_POLYB_EVAL(t);
        const long double gn = TMPL_POLYC_EVAL(t);
        const long double gd = TMPL_POLYD_EVAL(t);

        /*  The auxiliary functions can be computed as the ratio.             */
        f = fn / fd;
        g = gn / gd;
    }

    /*  Second Pade approximant is performed on the interval [2.5, 4.0].      */
    else
    {
        /*  The Pade approximant is computed near x = 3.0. Shift the variable.*/
        const long double t = x - 3.0L;

        /*  Evaluate the four polynomials using Horner's method.              */
        const long double fn = TMPL_POLYE_EVAL(t);
        const long double fd = TMPL_POLYF_EVAL(t);
        const long double gn = TMPL_POLYG_EVAL(t);
        const long double gd = TMPL_POLYH_EVAL(t);

        /*  The auxiliary functions can be computed as the ratio.             */
        f = fn / fd;
        g = gn / gd;
    }

    /*  For all other precisions we use a single Remez approximation.         */
#else

    /*  The rational Remez approximation is computed in terms of 1 / x.       */
    const long double t = 1.0L / x;

    /*  Evaluate the polynomials using Horner's method.                       */
    const long double fn = TMPL_POLYA_EVAL(t);
    const long double fd = TMPL_POLYB_EVAL(t);
    const long double gn = TMPL_POLYC_EVAL(t);
    const long double gd = TMPL_POLYD_EVAL(t);

    /*  The auxiliary functions can be computed as the ratio.                 */
    const long double f = fn / fd;
    const long double g = gn / gd;

#endif
    /*  End of quadruple / double-double vs. double / extended / portable.    */

    /*  xhi^2 is big enough that we need to compute cos and sin fully. Do     *
     *  this simultaneously using the SinCosPi function.                      */
    tmpl_LDouble_SinCosPi(0.5L * xhi * xhi, &sin_hi, &cos_hi);

    /*  cos and sin can be computed using the angle sum formula.              */
    cos_x = cos_hi * cos_lo - sin_hi * sin_lo;
    sin_x = cos_hi * sin_lo + sin_hi * cos_lo;

    /*  With the auxiliary functions computed, we can compute C(x).           */
    return 0.5L + (f*sin_x - g*cos_x);
}
/*  End of tmpl_LDouble_Normalized_Fresnel_Cos_Auxiliary_Small.               */

/*  Undefine everything in case someone wants to #include this file.          */
#include "../../math/auxiliary/tmpl_math_undef.h"
#undef TMPL_COS_MACLAURIN
#undef TMPL_SIN_MACLAURIN
#undef C0
#undef C1
#undef S0
#undef S1
#undef TMPL_LDOUBLE_SPLIT

#endif
/*  End of include guard.                                                     */
