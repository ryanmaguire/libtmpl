"""
################################################################################
#                                   LICENSE                                    #
################################################################################
#   This file is part of libtmpl.                                              #
#                                                                              #
#   libtmpl is free software: you can redistribute it and/or modify it         #
#   under the terms of the GNU General Public License as published by          #
#   the Free Software Foundation, either version 3 of the License, or          #
#   (at your option) any later version.                                        #
#                                                                              #
#   libtmpl is distributed in the hope that it will be useful,                 #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#   GNU General Public License for more details.                               #
#                                                                              #
#   You should have received a copy of the GNU General Public License          #
#   along with libtmpl.  If not, see <https://www.gnu.org/licenses/>.          #
################################################################################
#   Purpose:                                                                   #
#       Taylor and branch coefficients for the Lambert W function.             #
################################################################################
#   Author: Ryan Maguire                                                       #
#   Date:   January 23, 2023.                                                  #
################################################################################
"""

# Arbitrary precision rationals here.
import fractions

# Factorial functions.
import math

# Multi-precision math routines.
import mpmath
mpmath.mp.dps = 224

# Compute the nth Taylor coefficient of LambertW(x).
def taylor(n):
    if n == 0:
        return fractions.Fraction(0, 1)

    num = (-n)**(n-1)
    den = math.factorial(n)
    return fractions.Fraction(num, den)

# Following Corless, Gonnet, Hare, Jeffrey, and Knuth, define the mu function
# recursively. The alpha function is given below. The first few entries are
# given to high precision. The recursion is very long for even moderately sized
# n, such as n = 20 or so.
def mu(n):
    data = [
        mpmath.mpf('-1.0'),
        mpmath.mpf('1.0'),
        mpmath.mpf('-0.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333311'),
        mpmath.mpf('0.15277777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777782'),
        mpmath.mpf('-0.07962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962962967'),
        mpmath.mpf('0.0445023148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148148147'),
        mpmath.mpf('-0.025984714873603762492651381540270429159318048206937095825984714873603762492651381540270429159318048206937095825984714873603762492651381540270429159318048206937095825984714873603762492651381540270429159318048206937095825984714859'),
        mpmath.mpf('0.015635632532333921222810111699000587889476778365667254556143445032333921222810111699000587889476778365667254556143445032333921222810111699000587889476778365667254556143445032333921222810111699000587889476778365667254556143444984'),
        mpmath.mpf('-0.0096168920242994317068391142465216539290613364687438761512835586909660983735057809131883205957280031354105428179502253576327650401724475798549872623946698020772094846168920242994317068391142465216539290613364687438761512835586678'),
        mpmath.mpf('0.006014543252956117860953251899753957367126091405926796873298930912099636379471770418272475885644609924445315391817449430618154897990288936790994404163128442963833910335967949136673416508807455309512922681646961482352428854486434'),
        mpmath.mpf('-0.0038112980348919992267043021501183366752639729320113407904903103805710115723833144957973490209429852776903531361693227262500239180623268414763613666219976233693654818483350719290362637413391871553737123010099690483778275273474319'),
        mpmath.mpf('0.0024408779911439826658968585286437530215699919795549817105764587637995437329162588813774390885893923322886677775958591165332297999356592341111251556087926850223538446152594692669158669550595868448112226281930377560399116346598214'),
        mpmath.mpf('-0.0015769303446867842539234095399314115973161850314723352370052568193095551729906249034430714052722892838728839338502499605989927587245069336213978798950602029400992973619097685550970111250556304663910211844977886739813275402362396'),
        mpmath.mpf('0.0010262633205076071544375481533906861056468041465972965962079119916557589386208716885660731328856832373282391790023466379422570769708618904081268267912289947258484284634479508954218819875187589168471873634414187901243445912159301'),
        mpmath.mpf('-0.00067206163115613620400202004341907521591222536926226114140267760868569398047337676168937373312432282827330039935551580843747397916695570218189447255864250950656187953057623041147620008275686489663743421518441296204558192785887461'),
        mpmath.mpf('0.00044247306181462090993020760858473726479232802068800259165161921468427203373724785724021225771588061502248993025418415469777171801882514293272428767647024639401430589378613174830843933743946566227335467409691480257571857042514489'),
        mpmath.mpf('-0.00029267722472962744484992904081449252434715494941702310625933861066793814483484603763913306491027853752015035014576682926523836655438280829923371544331601710579652753152070405093987471442170573597094653450268229160869724012964457'),
        mpmath.mpf('0.00019438727605453931782225910504966719735095882655619517561029080707486710610072098819065030908368727840027681070298052737694922533768570244092899089629953561835989822849522952362103230159304559462088984761912762220914406918785399')
    ]

    # Use the lookup table for small n.
    if n < len(data):
        return data[n]

    # Use Eqn 4.23 of Corless, Gonnet, Hare, Jeffrey, and Knuth.
    a = mpmath.mpf(n-1) / mpmath.mpf(n+1)
    b = mu(n-2)/mpmath.mpf(2)
    c = alpha(n-2)/mpmath.mpf(4)
    d = alpha(n)/mpmath.mpf(2)
    e = mu(n-1)/mpmath.mpf(n+1)
    return a*(b + c) - d - e

# The alpha function that is used to compute the coefficients of the branch cut
# expansion. Like the mu function this is defined recursively.
def alpha(k):

    # Lookup table of the first few entries.
    data = [
        mpmath.mpf('2.0'),
        mpmath.mpf('-1.0'),
        mpmath.mpf('0.0'),
        mpmath.mpf('0.11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111092'),
        mpmath.mpf('-0.10185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185185182'),
        mpmath.mpf('0.076427469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469135802469173'),
        mpmath.mpf('-0.053999485596707818930041152263374485596707818930041152263374485596707818930041152263374485596707818930041152263374485596707818930041152263374485596707818930041152263374485596707818930041152263374485596707818930041152263374485551'),
        mpmath.mpf('0.03726195069077013521457965902410346854791299235743680188124632569077013521457965902410346854791299235743680188124632569077013521457965902410346854791299235743680188124632569077013521457965902410346854791299235743680188124632567'),
        mpmath.mpf('-0.025450934703442419491802207851590567639950355999738715788098504147886863936246652296035012084394800444183160232542948592331308380691096740479456528839244888627604676987393036775752825135541184923900973283689333072049121431837468'),
        mpmath.mpf('0.017307578201122841683541272018638273782306704117403705881072136216169137979837568314934570078603000413700002177368432512465434276133864611230866374899296709996298473664728808761730572430160907527162671195593006292594769961025078'),
        mpmath.mpf('-0.011751069465679456891733983640705177056343037138647563887618757303256617385561144134532337550170197632474724381445917797083777879388304628359498043997358126301884875273078290910938373215465122186658537824518620129045369100238743'),
        mpmath.mpf('0.007977070651458650124926906558626461951303547750082468222124633385982918937390163466327814097100137991117153701254556960350937749853420374029166242896728232151839180384480534718956562316677281730518388693318473186524659514404084'),
        mpmath.mpf('-0.0054182098050369676252361002072500755192853522811935074874086784292110135296060786513025936458775529474682478362231013177079761006427237620217784391364202804096548517041908728716053383460355394076298990619542800177285338519470934'),
        mpmath.mpf('0.0036836748226885900659942294628862443002273603009553539742753059538392784631380664215380177668156417040515718853080318013799408186152367135231245667372564404811231296740909822539365074257403388415646999922045102440077073734834934'),
        mpmath.mpf('-0.0025072757279999742035902313580295304916261361634816610466373496109091002436238717003118480825857024316899045635228418050432696864352898203719434513230464776759258581861117769552169070244857182098165978381683014397249306271595184'),
        mpmath.mpf('0.0017086497206356896196451673124874920961947958897223793447994656192206410790008431676489439654655952016739546708603883879623398618518893931807662051067648839959003672916815270744090150733059890829588151183049366882164340933450346'),
        mpmath.mpf('-0.0011658478182449269577599919803520197428035758544849173259591771693389593339629070360252568779258765656549210689591968693390630181739790581887938366813342433152246355923735358294665260182080468426306190699488874658280258587071674'),
        mpmath.mpf('0.00079645440364529394245239947428314994168307819953322756196499114196411898010258041985832238055481480591010065366301601399018727800379987561637455568319398701233714174840241498998498536427628518475744746037260558503506543683661914')
    ]

    # Use the lookup table for small values.
    if k < len(data):
        return data[k]

    # Compute the sum in Eqn 4.24 of Corless, Gonnet, Hare, Jeffrey, and Knuth.
    out = mpmath.mpf(0)
    for j in range(2, k):
        out += mu(j)*mu(k + 1 - j)

    return out

# The coefficients in Corless, Gonnet, Hare, Jeffrey, and Knuth are just mu(k).
# However the near-branch function computes in terms of sqrt(x + 1/e) instead
# of sqrt(2(1+ex)) like is done in their paper. This means we have an extra
# sqrt(2e)^n for the nth coefficient.
def branch_series(k):
    a = mpmath.sqrt(mpmath.mpf(2)*mpmath.e)
    return a**k * mu(k)
