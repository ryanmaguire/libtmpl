/*  Include guard to prevent including this file twice.                       */
#ifndef TMPL_LAMBERTW_NEGATIVE_MEDIUM_DOUBLE_H
#define TMPL_LAMBERTW_NEGATIVE_MEDIUM_DOUBLE_H

/*  TMPL_STATIC_INLINE macro found here.                                      */
#include <libtmpl/include/tmpl_config.h>

#if 0

/*  Coefficients for the numerator of the Remez rational approximation.       */
#define P0 (+9.9999999802382865287974957076756247955830658025753E-01)
#define P1 (+8.0203360465502010827680539123815835486337391202017E+00)
#define P2 (+2.3687894625483566073837539005994858835669630852821E+01)
#define P3 (+3.0828992841470776583415284243103383358139664047431E+01)
#define P4 (+1.5860057051490158689661746560108296245973913230872E+01)
#define P5 (+1.4271160551730612109308149435243240279921332726055E+00)
#define P6 (-1.7969142555767760819365071536545054052016065689549E-01)

/*  Coefficients for the denominator of the Remez rational approximation.     */
#define Q0 (+1.0000000000000000000000000000000000000000000000000E+00)
#define Q1 (+9.0203361560863432779083691285478827400849964066405E+00)
#define Q2 (+3.1208233460294574216061472054002132990108968257505E+01)
#define Q3 (+5.1173426562542667179166824664370564879852136262856E+01)
#define Q4 (+3.9067368017139384701941623682524968503154384743488E+01)
#define Q5 (+1.0777346593195088553210887959197294910882973609381E+01)

#define TMPL_NUM_EVAL(z) P0 + z*(P1 + z*(P2 + z*(P3 + z*(P4 + z*(P5 + z*P6)))))
#define TMPL_DEN_EVAL(z) Q0 + z*(Q1 + z*(Q2 + z*(Q3 + z*(Q4 + z*Q5))))

TMPL_STATIC_INLINE
double tmpl_Double_LambertW_Negative_Medium(double x)
{
    const double num = TMPL_NUM_EVAL(x);
    const double den = TMPL_DEN_EVAL(x);
    return x * num / den;
}

#elif 0

/*  Coefficients for the numerator of the Remez rational approximation.       */
#define P0 (+9.9999998837063354092627451951907048776399449890765E-01)
#define P1 (+7.0307670589340527130463918227985635753445177682868E+00)
#define P2 (+1.7027062389898651859532151371661058805307518701437E+01)
#define P3 (+1.5617090021791229936740824456202704182441478234201E+01)
#define P4 (+3.1439270950847887618326795073422436608322347470999E+00)
#define P5 (-3.8209325886402539401511125477680943109020456221873E-01)
#define P6 (+5.0139643739302011738614883070532788134084069258775E-01)

/*  Coefficients for the denominator of the Remez rational approximation.     */
#define Q0 (+1.0000000000000000000000000000000000000000000000000E+00)
#define Q1 (+7.0307677285871792340038911340116287690992609529687E+00)
#define Q2 (+1.5527079547864539582943341989143960562830075222252E+01)
#define Q3 (+6.2378620716210459371475287906461009869500662453623E+00)
#define Q4 (-1.5983314342461268375305228877050559316016787812375E+01)
#define Q5 (-1.3265583211942141355083722719350483468496180754679E+01)

#define TMPL_NUM_EVAL(z) P0 + z*(P1 + z*(P2 + z*(P3 + z*(P4 + z*(P5 + z*P6)))))
#define TMPL_DEN_EVAL(z) Q0 + z*(Q1 + z*(Q2 + z*(Q3 + z*(Q4 + z*Q5))))

TMPL_STATIC_INLINE
double tmpl_Double_LambertW_Negative_Medium(double x)
{
    const double num = TMPL_NUM_EVAL(x);
    const double den = TMPL_DEN_EVAL(x);
    return (1.0 - x) *  x * num / den;
}

#else

/*  Coefficients for the numerator of the Remez rational approximation.       */
#define P0 (+2.6683588650304343192429053464164873305841414237587E-10)
#define P1 (-9.9999998401967495279419772134974215487976382391713E-01)
#define P2 (-8.5552871427336440771516893805280437573246876701166E+00)
#define P3 (-2.7645641732574898076018602342013734010753290337258E+01)
#define P4 (-4.1331262156686232026108911322302544050303514056371E+01)
#define P5 (-2.7587015648095651127077039665960926012752204524432E+01)
#define P6 (-6.1017572709539223428800978547050200339352752821541E+00)

/*  Coefficients for the denominator of the Remez rational approximation.     */
#define Q0 (+1.0000000000000000000000000000000000000000000000000E+00)
#define Q1 (+1.0055287569104348027986319792253962520699001723947E+01)
#define Q2 (+4.0061913072186109379076447591154447567419522200501E+01)
#define Q3 (+7.9818431772047227304321057395006659098201836414316E+01)
#define Q4 (+8.2054632337608892054940325174322949245897191987195E+01)
#define Q5 (+3.9738286684782642048227155804856971291938421306857E+01)
#define Q6 (+6.5613494305704335503030503581498945183332317993238E+00)

#define TMPL_NUM_EVAL(z) P0 + z*(P1 + z*(P2 + z*(P3 + z*(P4 + z*(P5 + z*P6)))))
#define TMPL_DEN_EVAL(z) Q0 + z*(Q1 + z*(Q2 + z*(Q3 + z*(Q4 + z*(Q5 + z*Q6)))))

TMPL_STATIC_INLINE
double tmpl_Double_LambertW_Negative_Medium(double x)
{
    const double num = TMPL_NUM_EVAL(x);
    const double den = TMPL_DEN_EVAL(x);
    return x + x * num / den;
}

#endif

#undef P0
#undef P1
#undef P2
#undef P3
#undef P4
#undef P5
#undef P6
#undef Q0
#undef Q1
#undef Q2
#undef Q3
#undef Q4
#undef Q5
#undef TMPL_NUM_EVAL
#undef TMPL_DEN_EVAL

#endif
/*  End of include guard.                                                     */
